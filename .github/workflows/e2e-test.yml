name: E2E Test Execution

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      rdm_repository:
        description: 'RDM-osf.io repository (default: RCOSDP/RDM-osf.io)'
        required: false
        default: 'RCOSDP/RDM-osf.io'
      rdm_branch:
        description: 'RDM-osf.io branch to test against'
        required: false
        default: 'develop'
      osf_image:
        description: 'Custom OSF image (default: niicloudoperation/rdm-osf.io:latest)'
        required: false
        default: ''
      ember_image:
        description: 'Custom Ember image (default: niicloudoperation/rdm-ember-osf-web:latest)'
        required: false
        default: ''
      cas_image:
        description: 'Custom CAS image (default: niicloudoperation/rdm-cas-overlay:latest)'
        required: false
        default: ''
      mfr_image:
        description: 'Custom MFR image (default: niicloudoperation/rdm-modular-file-renderer:latest)'
        required: false
        default: ''
      wb_image:
        description: 'Custom WaterButler image (default: niicloudoperation/rdm-waterbutler:latest)'
        required: false
        default: ''
      test_config:
        description: 'Test configuration file to use'
        required: false
        default: 'ci.config.yaml'
      skip_failed:
        description: 'Continue running tests even if some fail'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  e2e-test:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        test-group:
          - name: user
            display_name: "User Tests"
            skip_admin: true
            skip_metadata: false
          - name: admin
            display_name: "Admin Tests"
            skip_admin: false
            skip_metadata: true
            skip_default_storage: true
            skip_login: true
            exclude_notebooks: |
              テスト手順-管理者機能-ログイン可否設定.ipynb
              テスト手順-管理者機能-ノード管理.ipynb
              テスト手順-管理者機能-ユーザ管理.ipynb
              テスト手順-管理者機能-機関設定.ipynb
              テスト手順-管理者機能-RDMユーザメール.ipynb
              テスト手順-管理者機能-RDM登録.ipynb
              テスト手順-管理者機能-アドオン利用制御.ipynb
              テスト手順-管理者機能-利用統計.ipynb
              テスト手順-管理者機能-アナウンス.ipynb
              テスト手順-管理者機能-証跡管理.ipynb
              テスト手順-管理者機能-NIIストレージのクォータ.ipynb
    name: E2E ${{ matrix.test-group.display_name }}

    steps:
    - name: Checkout test repository
      uses: actions/checkout@v4
      with:
        path: e2e-tests

    - name: Determine RDM repository and branch
      id: rdm_config
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          # Extract from PR body
          PR_BODY="${{ github.event.pull_request.body }}"
          RDM_REPO=$(echo "$PR_BODY" | grep -oP '^-\s*RDM_REPOSITORY:\s*\K.*$' | head -1 | tr -d ' ' || true)
          RDM_BRANCH=$(echo "$PR_BODY" | grep -oP '^-\s*RDM_BRANCH:\s*\K.*$' | head -1 | tr -d ' ' || true)
          
          # Use extracted values or defaults
          FINAL_REPO="${RDM_REPO:-RCOSDP/RDM-osf.io}"
          FINAL_BRANCH="${RDM_BRANCH:-develop}"
        else
          # Use workflow inputs or defaults
          FINAL_REPO="${{ github.event.inputs.rdm_repository || 'RCOSDP/RDM-osf.io' }}"
          FINAL_BRANCH="${{ github.event.inputs.rdm_branch || 'develop' }}"
        fi
        
        echo "Using RDM repository: $FINAL_REPO @ $FINAL_BRANCH"
        echo "repository=$FINAL_REPO" >> $GITHUB_OUTPUT
        echo "branch=$FINAL_BRANCH" >> $GITHUB_OUTPUT

    - name: Checkout RDM-osf.io
      uses: actions/checkout@v4
      with:
        repository: ${{ steps.rdm_config.outputs.repository }}
        ref: ${{ steps.rdm_config.outputs.branch }}
        path: RDM-osf.io

    - name: Configure Docker to use /mnt
      run: |
        # Stop Docker service
        sudo systemctl stop docker
        
        # Create Docker data directory on /mnt
        sudo mkdir -p /mnt/docker
        
        # Configure Docker to use /mnt
        sudo tee /etc/docker/daemon.json <<EOF
        {
          "data-root": "/mnt/docker"
        }
        EOF
        
        # Start Docker service
        sudo systemctl start docker
        
        # Verify Docker is using /mnt
        docker info | grep "Docker Root Dir"
        df -h

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Create required configuration files for RDM
      working-directory: RDM-osf.io
      run: |
        # Copy configuration files as per README-docker-compose.md
        cp ./website/settings/local-dist.py ./website/settings/local.py
        cp ./api/base/settings/local-dist.py ./api/base/settings/local.py
        cp ./docker-compose-dist.override.yml ./docker-compose.override.yml
        cp ./tasks/local-dist.py ./tasks/local.py
        
        # Create admin settings if running admin tests
        if [ "${{ matrix.test-group.name }}" = "admin" ]; then
          cp ./admin/base/settings/local-dist.py ./admin/base/settings/local.py
          echo "ALLOWED_HOSTS = ['localhost']" >> ./admin/base/settings/local.py
        fi

    - name: Create docker-compose override for NII Cloud Operation images
      working-directory: RDM-osf.io
      run: |
        # Check for image override in PR body or use workflow inputs
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          # Extract image overrides from PR description if present
          # Format: - OSF_IMAGE: yacchin1205/rdm2-osf.io:feature_ror-v2
          PR_BODY="${{ github.event.pull_request.body }}"
          OSF_OVERRIDE=$(echo "$PR_BODY" | grep -oP '^-\s*OSF_IMAGE:\s*\K.*$' | head -1 | tr -d ' ' || true)
          EMBER_OVERRIDE=$(echo "$PR_BODY" | grep -oP '^-\s*EMBER_IMAGE:\s*\K.*$' | head -1 | tr -d ' ' || true)
          CAS_OVERRIDE=$(echo "$PR_BODY" | grep -oP '^-\s*CAS_IMAGE:\s*\K.*$' | head -1 | tr -d ' ' || true)
          MFR_OVERRIDE=$(echo "$PR_BODY" | grep -oP '^-\s*MFR_IMAGE:\s*\K.*$' | head -1 | tr -d ' ' || true)
          WB_OVERRIDE=$(echo "$PR_BODY" | grep -oP '^-\s*WB_IMAGE:\s*\K.*$' | head -1 | tr -d ' ' || true)
          
          # Use overrides if found, otherwise defaults
          OSF_IMAGE="${OSF_OVERRIDE:-niicloudoperation/rdm-osf.io:latest}"
          EMBER_IMAGE="${EMBER_OVERRIDE:-niicloudoperation/rdm-ember-osf-web:latest}"
          CAS_IMAGE="${CAS_OVERRIDE:-niicloudoperation/rdm-cas-overlay:latest}"
          MFR_IMAGE="${MFR_OVERRIDE:-niicloudoperation/rdm-modular-file-renderer:latest}"
          WB_IMAGE="${WB_OVERRIDE:-niicloudoperation/rdm-waterbutler:latest}"
        else
          # Use workflow dispatch inputs or defaults
          OSF_IMAGE="${{ github.event.inputs.osf_image || 'niicloudoperation/rdm-osf.io:latest' }}"
          EMBER_IMAGE="${{ github.event.inputs.ember_image || 'niicloudoperation/rdm-ember-osf-web:latest' }}"
          CAS_IMAGE="${{ github.event.inputs.cas_image || 'niicloudoperation/rdm-cas-overlay:latest' }}"
          MFR_IMAGE="${{ github.event.inputs.mfr_image || 'niicloudoperation/rdm-modular-file-renderer:latest' }}"
          WB_IMAGE="${{ github.event.inputs.wb_image || 'niicloudoperation/rdm-waterbutler:latest' }}"
        fi
        
        # Log the images being used
        echo "Using Docker images:"
        echo "  OSF: $OSF_IMAGE"
        echo "  Ember: $EMBER_IMAGE"
        echo "  CAS: $CAS_IMAGE"
        echo "  MFR: $MFR_IMAGE"
        echo "  WaterButler: $WB_IMAGE"
        
        # Create docker-compose.override.yml with configurable images
        cat > docker-compose.override.yml << EOL
        # NII Cloud Operation images override
        services:
          fakecas:
            image: niicloudoperation/rdm-fakecas:latest
          admin:
            image: ${OSF_IMAGE}
            environment:
              AWS_EC2_METADATA_DISABLED: "true"
          admin_assets:
            image: ${OSF_IMAGE}
          api:
            image: ${OSF_IMAGE}
          assets:
            image: ${OSF_IMAGE}
          requirements:
            image: ${OSF_IMAGE}
            command:
              - /bin/bash
              - -c
              - apk add --no-cache --virtual .build-deps build-base linux-headers python3-dev musl-dev libxml2-dev libxslt-dev postgresql-dev libffi-dev libpng-dev freetype-dev jpeg-dev &&
                invoke requirements --all &&
                (python3 -m compileall /usr/lib/python3.6 || true) &&
                rm -Rf /python3.6/* &&
                cp -Rf -p /usr/lib/python3.6 /
          web:
            image: ${OSF_IMAGE}
            environment:
              OAUTHLIB_INSECURE_TRANSPORT: '1'
          worker:
            image: ${OSF_IMAGE}
          ember_osf_web:
            image: ${EMBER_IMAGE}
          cas:
            image: ${CAS_IMAGE}
          mfr:
            image: ${MFR_IMAGE}
          mfr_requirements:
            image: ${MFR_IMAGE}
          wb:
            image: ${WB_IMAGE}
          wb_worker:
            image: ${WB_IMAGE}
          wb_requirements:
            image: ${WB_IMAGE}
        EOL

    - name: Setup host networking alias
      run: |
        # Add loopback alias for Ubuntu as per README-docker-compose.md
        sudo ifconfig lo:0 192.168.168.167 netmask 255.255.255.255 up

    - name: Install RDM requirements
      working-directory: RDM-osf.io
      run: |
        # Install Python/Node requirements first
        docker-compose run --rm requirements
        docker-compose run --rm mfr_requirements  
        docker-compose run --rm wb_requirements
      timeout-minutes: 15

    - name: Run Django migrations
      working-directory: RDM-osf.io
      run: |
        # Run Django migrations after requirements installation
        echo "Running Django migrations..."
        docker-compose run --rm web python3 manage.py migrate
        
    - name: Enable feature flags
      working-directory: RDM-osf.io
      run: |
        # Enable Metadata addon feature flag
        echo "Enabling Metadata addon feature flag..."
        docker-compose run --rm web python3 manage.py waffle_flag ember_edit_draft_registration_page --everyone

    - name: Start infrastructure services
      working-directory: RDM-osf.io
      run: |
        # Start core infrastructure services
        docker-compose up -d elasticsearch postgres mongo rabbitmq
        
        # Wait for services to be ready
        echo "Waiting for infrastructure services to start..."
        sleep 30
        
        # Check if services are running
        docker-compose ps

    - name: Start supporting services
      working-directory: RDM-osf.io
      run: |
        # Start supporting services based on test group
        if [ "${{ matrix.test-group.name }}" = "admin" ]; then
          # Admin tests don't need mfr and sharejs
          docker-compose up -d wb fakecas
        else
          # User tests need all supporting services
          docker-compose up -d mfr wb fakecas sharejs
        fi
        
        # Wait for services to be ready
        echo "Waiting for supporting services to start..."
        sleep 20

    - name: Compile translations
      working-directory: RDM-osf.io
      run: |
        # Compile translation files for Japanese locale
        docker-compose run --rm web pybabel compile -d ./website/translations
        echo "Translation files compiled successfully"
        
        # Compile translations for admin if needed
        if [ "${{ matrix.test-group.name }}" = "admin" ]; then
          echo "Compiling translation files for admin services..."
          docker-compose run --rm web pybabel compile -D django -d ./admin/translations
          echo "Admin translation files compiled successfully"
        fi

    - name: Build and start assets
      working-directory: RDM-osf.io
      run: |
        # Remove existing node_modules and start assets
        rm -rf ./node_modules || true
        docker-compose up -d assets
        
        # Start admin_assets if needed for admin tests
        if [ "${{ matrix.test-group.name }}" = "admin" ]; then
          echo "Starting admin_assets for admin tests..."
          docker-compose up -d admin_assets
        fi
        
        # Wait for assets to build (this can take a while)
        echo "Waiting for assets to build..."
        sleep 120
        
        # Check assets container status
        docker-compose logs --tail 50 assets
        
        # Check admin_assets if running admin tests
        if [ "${{ matrix.test-group.name }}" = "admin" ]; then
          docker-compose logs --tail 50 admin_assets
        fi

    - name: Start main OSF services
      working-directory: RDM-osf.io
      run: |
        # Start the main OSF services
        docker-compose up -d wb_worker worker web api ember_osf_web
        
        # Start admin service if needed for admin tests (admin_assets already started)
        if [ "${{ matrix.test-group.name }}" = "admin" ]; then
          echo "Starting admin service for admin tests..."
          docker-compose up -d admin
        fi
        
        # Wait for services to start
        echo "Waiting for main services to start..."
        sleep 60
        
        # Wait for ember_osf_web to finish building by checking logs
        echo "Waiting for ember_osf_web to complete build..."
        TIMEOUT=600  # 10 minutes timeout
        ELAPSED=0
        while [ $ELAPSED -lt $TIMEOUT ]; do
          if docker-compose logs ember_osf_web | grep -q "Build successful.*Serving on http://0.0.0.0:4200/"; then
            echo "ember_osf_web build completed successfully!"
            break
          fi
          echo "Waiting for ember_osf_web build to complete... (${ELAPSED}s elapsed)"
          sleep 10
          ELAPSED=$((ELAPSED + 10))
        done
        
        if [ $ELAPSED -ge $TIMEOUT ]; then
          echo "Timeout waiting for ember_osf_web build to complete"
          docker-compose logs --tail 50 ember_osf_web
          exit 1
        fi

    - name: Check service status
      working-directory: RDM-osf.io
      run: |
        # Display status of all services
        docker-compose ps
        
        # Show recent logs for debugging
        echo "=== Web service logs ==="
        docker-compose logs --tail 20 web
        echo "=== API service logs ==="
        docker-compose logs --tail 20 api
        echo "=== Assets service logs ==="
        docker-compose logs --tail 20 assets

    - name: Wait for services to be fully ready
      run: |
        # Additional wait time for services to fully initialize
        echo "Waiting for services to be fully ready..."
        sleep 90

    - name: Test endpoint accessibility
      run: |
        # Function to test endpoint and check for 400/500 errors
        test_endpoint() {
          local name="$1"
          local url="$2"
          echo "Testing $name..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" --retry 5 --retry-delay 10 --retry-connrefused "$url" || echo "000")
          echo "$name response code: $RESPONSE"
          if [[ "$RESPONSE" == "400" || "$RESPONSE" == "500" ]]; then
            echo "$name returned HTTP $RESPONSE - failing" >&2
            exit 1
          elif [[ "$RESPONSE" == "000" ]]; then
            echo "$name connection failed (HTTP $RESPONSE) - failing" >&2
            exit 1
          elif [[ "$RESPONSE" != "200" && "$RESPONSE" != "302" ]]; then
            echo "$name not accessible (HTTP $RESPONSE)" >&2
          else
            echo "$name is accessible"
          fi
        }
        
        # Test main OSF endpoints
        test_endpoint "OSF Web (port 5000)" "http://localhost:5000/"
        test_endpoint "OSF API (port 8000)" "http://localhost:8000/v2/"
        test_endpoint "Ember OSF Web (port 4200)" "http://localhost:4200/"
        test_endpoint "WaterButler (port 7777)" "http://localhost:7777/status"
        test_endpoint "FakeCAS (port 8080)" "http://localhost:8080/login"
        
        # Test MFR only for user tests (not needed for admin)
        if [ "${{ matrix.test-group.name }}" != "admin" ]; then
          test_endpoint "MFR (port 7778)" "http://localhost:7778/status"
        fi
        
        # Test admin endpoints if running admin tests
        if [ "${{ matrix.test-group.name }}" = "admin" ]; then
          test_endpoint "Admin Web (port 8001)" "http://localhost:8001/"
        fi

    - name: Create test users and projects
      working-directory: RDM-osf.io
      run: |
        # Copy the setup script to the container
        docker cp ${{ github.workspace }}/e2e-tests/.github/scripts/setup_test_data.py "$(docker-compose ps -q web)":/tmp/setup_test_data.py
        
        # Execute the script and capture project IDs
        docker-compose exec -T web bash -c "python3 manage.py shell < /tmp/setup_test_data.py" | tee /tmp/setup_output.txt
        
        # Extract project IDs and names from output
        PROJECT_ID_1=$(grep "PROJECT_ID_testuser1@example.com:" /tmp/setup_output.txt | cut -d' ' -f2)
        PROJECT_ID_2=$(grep "PROJECT_ID_testuser2@example.com:" /tmp/setup_output.txt | cut -d' ' -f2)
        PROJECT_NAME_1=$(grep "PROJECT_NAME_testuser1@example.com:" /tmp/setup_output.txt | cut -d' ' -f2-)
        PROJECT_NAME_2=$(grep "PROJECT_NAME_testuser2@example.com:" /tmp/setup_output.txt | cut -d' ' -f2-)
        
        # Verify project IDs were created
        if [ -z "${PROJECT_ID_1}" ] || [ -z "${PROJECT_ID_2}" ]; then
          echo "ERROR: Failed to create projects for test users"
          echo "PROJECT_ID_1: ${PROJECT_ID_1}"
          echo "PROJECT_ID_2: ${PROJECT_ID_2}"
          exit 1
        fi
        
        # Export for later steps
        echo "PROJECT_ID_1=${PROJECT_ID_1}" >> $GITHUB_ENV
        echo "PROJECT_ID_2=${PROJECT_ID_2}" >> $GITHUB_ENV
        echo "PROJECT_NAME_1=${PROJECT_NAME_1}" >> $GITHUB_ENV
        echo "PROJECT_NAME_2=${PROJECT_NAME_2}" >> $GITHUB_ENV
        
        echo "Projects created successfully:"
        echo "  testuser1: ${PROJECT_ID_1} - ${PROJECT_NAME_1}"
        echo "  testuser2: ${PROJECT_ID_2} - ${PROJECT_NAME_2}"

    - name: Register e-Rad data
      working-directory: RDM-osf.io
      run: |
        # Copy e-Rad sample data to container
        docker cp ${{ github.workspace }}/e2e-tests/erad_sample.csv "$(docker-compose ps -q web)":/tmp/erad_sample.csv
        
        # Register e-Rad metadata
        echo "Registering e-Rad test data..."
        docker-compose exec -T web python3 -m scripts.register_erad_metadata /tmp/erad_sample.csv
        echo "e-Rad data registered successfully"

    - name: Set up Python for E2E tests
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install E2E test dependencies
      working-directory: e2e-tests
      run: |
        # Install without cache to save disk space
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt
        pip install --no-cache-dir papermill
        
        # Clear pip cache if any remains
        pip cache purge || true

    - name: Setup Node.js for Playwright
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Playwright
      run: |
        # Install Playwright browsers with OS dependencies
        playwright install --with-deps chromium

    - name: Prepare test configuration
      working-directory: e2e-tests
      run: |
        # Create CI configuration based on test group
        cat > ci.config.yaml << 'EOF'
        # CI Test Configuration - ${{ matrix.test-group.display_name }}
        rdm_url: 'http://localhost:5000/'
        admin_rdm_url: 'http://localhost:8001/'
        
        # Test users (created above)
        idp_name_1: 'FakeCAS'
        idp_username_1: 'testuser1@example.com'
        idp_password_1: 'testpass123'
        
        idp_name_2: 'FakeCAS'
        idp_username_2: 'testuser2@example.com'
        idp_password_2: 'testpass456'
        
        # Test project URLs (using created project IDs and names)
        rdm_project_url_1: 'http://localhost:5000/${{ env.PROJECT_ID_1 }}/'
        rdm_project_name_1: '${{ env.PROJECT_NAME_1 }}'
        rdm_project_url_2: 'http://localhost:5000/${{ env.PROJECT_ID_2 }}/'
        
        # Test settings for ${{ matrix.test-group.name }} group
        skip_failed_test: true  # Continue on failure
        transition_timeout: 60000
        skip_preview_check: true
        skip_default_storage: ${{ matrix.test-group.skip_default_storage || false }}
        skip_metadata: ${{ matrix.test-group.skip_metadata }}
        skip_admin: ${{ matrix.test-group.skip_admin }}
        skip_login: ${{ matrix.test-group.skip_login || false }}
        enable_1gb_file_upload: false
        skip_erad_completion_test: false  # e-Rad completion test enabled
        
        # Storage configurations (empty for CI)
        storages_oauth: []
        storages_s3: []
        EOF
        
        # Add exclude_notebooks if specified
        if [ -n "${{ matrix.test-group.exclude_notebooks }}" ]; then
          echo "" >> ci.config.yaml
          echo "# Exclude specific notebooks" >> ci.config.yaml
          echo "exclude_notebooks:" >> ci.config.yaml
          echo "${{ matrix.test-group.exclude_notebooks }}" | while read notebook; do
            if [ -n "$notebook" ]; then
              echo "  - '$notebook'" >> ci.config.yaml
            fi
          done
        fi
        
        # Display the generated configuration for debugging
        echo "Generated CI configuration for ${{ matrix.test-group.display_name }}:"
        cat ci.config.yaml

    - name: Create result directories
      working-directory: e2e-tests
      run: |
        mkdir -p result
        mkdir -p result-failed

    - name: Run E2E tests
      working-directory: e2e-tests
      run: |
        # Run the automated test runner with failed notebook extraction
        python run_tests.py ci.config.yaml --failed-result-path result-failed

    - name: Generate Excel summary
      if: always()
      working-directory: e2e-tests
      run: |
        # Install required dependencies for Excel generation
        pip install openpyxl
        
        # Generate Excel summary from test results
        python .github/scripts/generate_excel_summary.py result/ "GitHub Actions" "${{ github.run_number }}"
        
        # List generated Excel files and screenshots
        ls -la result/test-summary-*.xlsx || echo "No Excel summary generated"
        ls -la result/screenshots/ || echo "No screenshots generated"

    - name: Upload Excel summary with screenshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-summary-excel-${{ matrix.test-group.name }}
        path: |
          e2e-tests/result/test-summary-*.xlsx
          e2e-tests/result/screenshots/
        retention-days: 30
      id: excel-upload

    - name: Upload failed test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-failed-${{ matrix.test-group.name }}
        path: e2e-tests/result-failed/
        retention-days: 30

    - name: Upload full test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-full-${{ matrix.test-group.name }}
        path: e2e-tests/result/
        retention-days: 7

    - name: Display final service status
      if: always()
      working-directory: RDM-osf.io
      run: |
        echo "=== Final service status ==="
        docker-compose ps
        
        echo "=== Service resource usage ==="
        docker stats --no-stream

    - name: Cleanup
      if: always()
      run: |
        cd RDM-osf.io
        
        # Save logs for debugging
        docker-compose logs > ../e2e-tests/docker-compose-logs.txt 2>&1 || true
        
        # Stop all services
        docker-compose down -v
        
        # Clean up Docker resources
        docker system prune -f

    - name: Upload Docker logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: docker-compose-logs-${{ matrix.test-group.name }}
        path: e2e-tests/docker-compose-logs.txt
        retention-days: 7

  post-results-to-pr:
    name: Post Results to PR
    runs-on: ubuntu-latest
    needs: [e2e-test]
    if: always() && github.event_name == 'pull_request'
    
    steps:
    - name: Comment PR with test results
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          
          // Build comment
          const comment = `## 📊 E2E Test Results
          
          Excel summaries and screenshots are available as artifacts:
          
          - [View all artifacts](${runUrl}#artifacts)
          
          *Run ID: ${context.runId}*`;
          
          // Post comment
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: comment
          });